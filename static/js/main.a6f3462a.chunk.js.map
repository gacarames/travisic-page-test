{"version":3,"sources":["components/Header.js","utils.js","components/Link.js","components/LinkList.js","components/CreateLink.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","_this","this","authToken","localStorage","getItem","AUTH_TOKEN","react_default","a","createElement","className","react_router_dom","to","onClick","removeItem","props","history","push","Component","withRouter","timeDifferenceForDate","date","current","previous","elapsed","milliSecondsPerMinute","Math","round","milliSecondsPerHour","milliSecondsPerDay","timeDifference","Date","getTime","Link","VOTE_MUTATION","gql","_templateObject","index","react_apollo_esm","mutation","variables","linkId","link","id","voteMutation","description","url","votes","length","postedBy","name","createdAt","LinkList","FEED_QUERY","LinkList_templateObject","query","_ref","loading","error","data","linksToRender","feed","links","map","components_Link","key","CreateLink","state","_this2","POST_MUTATION","CreateLink_templateObject","_this$state","value","onChange","e","setState","target","type","placeholder","onCompleted","postMutation","Login","login","email","password","_confirm","_callee","_ref2","token","regenerator_default","wrap","_context","prev","next","signup","_saveUserData","stop","setItem","SIGNUP_MUTATION","Login_templateObject","LOGIN_MUTATION","_templateObject2","App","components_Header","react_router","exact","path","component","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","authLink","setContext","_","headers","Object","objectSpread","authorization","concat","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6f3462a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport { withRouter } from 'react-router'\n\nimport { AUTH_TOKEN } from '../constants'\n\nclass Header extends Component {\n  render() {\n    const authToken = localStorage.getItem(AUTH_TOKEN)\n    return (\n      <div className=\"flex pa1 justify-between nowrap orange\">\n        <div className=\"flex flex-fixed black\">\n          <div className=\"fw7 mr1\">Hacker News</div>\n          <Link to=\"/\" className=\"ml1 no-underline black\">\n            new\n          </Link>\n          {authToken && (\n            <div className=\"flex\">\n              <div className=\"ml1\">|</div>\n              <Link to=\"/create\" className=\"ml1 no-underline black\">\n                submit\n              </Link>\n            </div>\n          )}\n        </div>\n        <div className=\"flex flex-fixed\">\n          {authToken ? (\n            <div\n              className=\"ml1 pointer black\"\n              onClick={() => {\n                localStorage.removeItem(AUTH_TOKEN)\n                this.props.history.push(`/`)\n              }}\n            >\n              logout\n            </div>\n          ) : (\n            <Link to=\"/login\" className=\"ml1 no-underline black\">\n              login\n            </Link>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Header)","function timeDifference(current, previous) {\n    const milliSecondsPerMinute = 60 * 1000\n    const milliSecondsPerHour = milliSecondsPerMinute * 60\n    const milliSecondsPerDay = milliSecondsPerHour * 24\n    const milliSecondsPerMonth = milliSecondsPerDay * 30\n    const milliSecondsPerYear = milliSecondsPerDay * 365\n  \n    const elapsed = current - previous\n  \n    if (elapsed < milliSecondsPerMinute / 3) {\n      return 'just now'\n    }\n  \n    if (elapsed < milliSecondsPerMinute) {\n      return 'less than 1 min ago'\n    } else if (elapsed < milliSecondsPerHour) {\n      return Math.round(elapsed / milliSecondsPerMinute) + ' min ago'\n    } else if (elapsed < milliSecondsPerDay) {\n      return Math.round(elapsed / milliSecondsPerHour) + ' h ago'\n    } else if (elapsed < milliSecondsPerMonth) {\n      return Math.round(elapsed / milliSecondsPerDay) + ' days ago'\n    } else if (elapsed < milliSecondsPerYear) {\n      return Math.round(elapsed / milliSecondsPerMonth) + ' mo ago'\n    } else {\n      return Math.round(elapsed / milliSecondsPerYear) + ' years ago'\n    }\n  }\n  \n  export function timeDifferenceForDate(date) {\n    const now = new Date().getTime()\n    const updated = new Date(date).getTime()\n    return timeDifference(now, updated)\n  }","import React, { Component } from \"react\";\n\nimport { AUTH_TOKEN } from \"../constants\";\nimport { timeDifferenceForDate } from \"../utils\";\n\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nclass Link extends Component {\n  render() {\n    const VOTE_MUTATION = gql`\n      mutation VoteMutation($linkId: ID!) {\n        vote(linkId: $linkId) {\n          id\n          link {\n            votes {\n              id\n              user {\n                id\n              }\n            }\n          }\n          user {\n            id\n          }\n        }\n      }\n    `;\n    const authToken = localStorage.getItem(AUTH_TOKEN);\n    return (\n      <div className=\"flex mt2 items-start\">\n        <div className=\"flex items-center\">\n          <span className=\"gray\">{this.props.index + 1}.</span>\n          {authToken && (\n            <Mutation\n              mutation={VOTE_MUTATION}\n              variables={{ linkId: this.props.link.id }}\n            >\n              {voteMutation => (\n                <div className=\"ml1 gray f11\" onClick={voteMutation}>\n                  ▲\n                </div>\n              )}\n            </Mutation>\n          )}\n        </div>\n        <div className=\"ml1\">\n          <div>\n            {this.props.link.description} ({this.props.link.url})\n          </div>\n          <div className=\"f6 lh-copy gray\">\n            {this.props.link.votes.length} votes | by{\" \"}\n            {this.props.link.postedBy\n              ? this.props.link.postedBy.name\n              : \"Unknown\"}{\" \"}\n            {timeDifferenceForDate(this.props.link.createdAt)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Link;\n","import React, { Component } from \"react\";\nimport Link from \"./Link\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nclass LinkList extends Component {\n  render() {\n    const FEED_QUERY = gql`\n      {\n        feed {\n          links {\n            id\n            createdAt\n            url\n            description\n            postedBy {\n              id\n              name\n            }\n            votes {\n              id\n              user {\n                id\n              }\n            }\n          }\n        }\n      }\n    `;\n    return (\n      <Query query={FEED_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <div>Fetching</div>;\n          if (error) return <div>Error</div>;\n\n          const linksToRender = data.feed.links;\n\n          return (\n            <div>\n              {linksToRender.map((link, index) => (\n                <Link key={link.id} link={link} index={index} />\n              ))}\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default LinkList;\n","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nclass CreateLink extends Component {\n  state = {\n    description: \"\",\n    url: \"\"\n  };\n\n  render() {\n    const POST_MUTATION = gql`\n      mutation PostMutation($description: String!, $url: String!) {\n        post(description: $description, url: $url) {\n          id\n          createdAt\n          url\n          description\n        }\n      }\n    `;\n\n    const { description, url } = this.state;\n    return (\n      <div>\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={description}\n            onChange={e => this.setState({ description: e.target.value })}\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={url}\n            onChange={e => this.setState({ url: e.target.value })}\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <Mutation\n          mutation={POST_MUTATION}\n          variables={{ description, url }}\n          onCompleted={() => this.props.history.push(\"/\")}\n        >\n          {postMutation => <button onClick={postMutation}>Submit</button>}\n        </Mutation>\n      </div>\n    );\n  }\n}\n\nexport default CreateLink;\n","import React, { Component } from \"react\";\nimport { AUTH_TOKEN } from \"../constants\";\n\nimport { Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nclass Login extends Component {\n  state = {\n    login: true, // switch between Login and SignUp\n    email: \"\",\n    password: \"\",\n    name: \"\"\n  };\n\n  render() {\n    const SIGNUP_MUTATION = gql`\n      mutation SignupMutation(\n        $email: String!\n        $password: String!\n        $name: String!\n      ) {\n        signup(email: $email, password: $password, name: $name) {\n          token\n        }\n      }\n    `;\n\n    const LOGIN_MUTATION = gql`\n      mutation LoginMutation($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n          token\n        }\n      }\n    `;\n    const { login, email, password, name } = this.state;\n    return (\n      <div>\n        <h4 className=\"mv3\">{login ? \"Login\" : \"Sign Up\"}</h4>\n        <div className=\"flex flex-column\">\n          {!login && (\n            <input\n              value={name}\n              onChange={e => this.setState({ name: e.target.value })}\n              type=\"text\"\n              placeholder=\"Your name\"\n            />\n          )}\n          <input\n            value={email}\n            onChange={e => this.setState({ email: e.target.value })}\n            type=\"text\"\n            placeholder=\"Your email address\"\n          />\n          <input\n            value={password}\n            onChange={e => this.setState({ password: e.target.value })}\n            type=\"password\"\n            placeholder=\"Choose a safe password\"\n          />\n        </div>\n        <div className=\"flex mt3\">\n          <Mutation\n            mutation={login ? LOGIN_MUTATION : SIGNUP_MUTATION}\n            variables={{ email, password, name }}\n            onCompleted={data => this._confirm(data)}\n          >\n            {mutation => (\n              <div className=\"pointer mr2 button\" onClick={mutation}>\n                {login ? \"login\" : \"create account\"}\n              </div>\n            )}\n          </Mutation>\n          <div\n            className=\"pointer button\"\n            onClick={() => this.setState({ login: !login })}\n          >\n            {login ? \"need to create an account?\" : \"already have an account?\"}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  _confirm = async data => {\n    const { token } = this.state.login ? data.login : data.signup\n    this._saveUserData(token)\n    this.props.history.push(`/`)\n  }\n\n  _saveUserData = token => {\n    localStorage.setItem(AUTH_TOKEN, token);\n  };\n}\n\nexport default Login;\n","import React, { Component } from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Header from './Header'\nimport LinkList from './LinkList'\nimport CreateLink from './CreateLink'\nimport Login from './Login'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"center w85\">\n        <Header />\n        <div className=\"ph3 pv1 background-gray\">\n          <Switch>\n            <Route exact path=\"/\" component={LinkList} />\n            <Route exact path=\"/create\" component={CreateLink} />\n            <Route exact path=\"/login\" component={Login} />\n          </Switch>\n        </div>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker';\nimport { setContext } from 'apollo-link-context'\nimport { AUTH_TOKEN } from './constants'\n\n// 1\nimport { ApolloProvider } from 'react-apollo'\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { BrowserRouter } from 'react-router-dom'\n\n\n// 2\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:4000'\n})\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(AUTH_TOKEN)\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  }\n})\n\n// 3\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n})\n\n// 4\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n)\nserviceWorker.unregister();"],"sourceRoot":""}